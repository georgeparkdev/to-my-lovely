@inject IQuestionsStateService QuestionsState
@inject IDialogService DialogService

<div class="page" style="background: linear-gradient(90deg, #ff3131, #ff914d);">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="content-wrapper">
                    @if (_currentQuestion is not null)
                    {
                        <div class="cloud">
                            <div class="position-relative">
                                <p>@_currentQuestion.QuestionText</p>
                                
                                <div class="btn btn-try-answer" @onclick="TryAnswer">
                                    Ответить
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* <Modal @ref="_modal" OpenChanged="HandleModalOpenChanged"> *@
@*     @if (_currentQuestion?.PossibleAnswers.Length == 0) // input type, otherwise select type *@
@*     { *@
@*         <div class="modal-body"> *@
@*             <label for="answer">Ответ:</label> *@
@*             <input id="answer" @bind="_modalAnswer" class="input-text" /> *@
@*             $1$ <button class="btn btn-submit" @onclick="() => SubmitAnswer()">OK</button> #1# *@
@*         </div> *@
@*     } *@
@*     else *@
@*     { *@
@*         <div class="modal-body"> *@
@*             <label>Выберите ответ:</label> *@
@*             @foreach (var answer in _currentQuestion?.PossibleAnswers ?? []) *@
@*             { *@
@*                 <div class="answer-block" @onclick="() => SubmitAnswer(answer)">@answer</div> *@
@*             } *@
@*         </div> *@
@*     } *@
@* </Modal> *@

@code {
    [Parameter] public EventCallback OnWrongAnswer { get; set; }
    [Parameter] public EventCallback OnCompleteQuestions { get; set; }
    
    IQuestionsStateService.Question? _currentQuestion;

    protected override void OnInitialized()
    {
        _currentQuestion = QuestionsState.GetCurrentQuestion();
        StateHasChanged();
    }

    async Task TryAnswer()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<QuestionDialog>
        {
            { x => x.Question, _currentQuestion }
        };

        IDialogReference dialogReference = await DialogService.ShowAsync<QuestionDialog>("", parameters, options);
        DialogResult? result = await dialogReference.Result;

        if (result?.Data is bool and true)
        {
            if (QuestionsState.IsLastQuestion())
            {
                await OnCompleteQuestions.InvokeAsync();
                return;
            }
            
            QuestionsState.NextQuestion();
            _currentQuestion = QuestionsState.GetCurrentQuestion();
        }
        else
        {
            await OnWrongAnswer.InvokeAsync();
        }
    }
}
